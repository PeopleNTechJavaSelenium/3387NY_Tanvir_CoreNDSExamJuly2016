Please answer the below Data Structure Questions:

why do we need data structure?

Answer :
Data structure is a particular way of storing and
organizing information in a computer so that it can be retrieved and
used most productively.
Different kinds of data structures are meant  for different kinds of
applications, and some are highly specialized to specific tasks.
Data structures are important for the following reasons:
1. Data structures are used in almost every program or software system.
2. Specific data structures are essential
ingredients of many efficient algorithms, and make possible the
management of huge amounts of data, such as large integrated collection
of databases.
3. Some programming languages emphasize data structures, rather than algorithms, as the key organizing factor in software design.
----------------------------------------
List out the areas in which data structures are applied extensively?
Answer :
Compiler Design, Operating System, Database Management System, Statistical analysis package, Numerical Analysis, Graphics, Artificial Intelligence, Simulation

----------------------------------------------
what is an Array?


In programming, a series of objects all of which are the same size and type. Each object in an array is called an array element.
For example, you could have an array of integers or an array of characters or an array of anything that has a defined data type.
The important characteristics of an array are:
Each element has the same data type (although they may have different values).
The entire array is stored contiguously in memory (that is, there are no gaps between elements).
Arrays can have more than one dimension. A one-dimensional array is called a vector ; a two-dimensional array is called a matrix.

----------------------------------------------------
what is the difference between the Array and ArrayList?

Answer:

Resizable :Array is static in size that is fixed length data structure, One can not change the length after creating the Array object.
Primitives :  ArrayList can not contains primitive data types (like int , float , double) it can only contains Object while Array can contain both primitive data types as well as objects.
Iterating the values : We can use iterator  to iterate through ArrayList . The iterators returned by the ArrayList class's iterator and listiterator method are fail-fast.  We can use for loop or for each loop to iterate through array .
Type-Safety :  In Java , one can ensure Type Safety through Generics. while Array is a homogeneous data structure , thus it will contain objects of specific class or primitives of specific  data type. In array if one try to store the different data type other than the specified while creating the array object , ArrayStoreException is thrown.
Length :  Length of the ArrayList is provided by the size() method while Each array object has the length variable which returns the length of the array
Adding elements : We can insert elements into the arraylist object using the add() method while  in array we insert elements using the assignment operator.
Multi-dimensional :  Array can be multi dimensional , while ArrayList is always single dimensional.




------------------------------------------------
what is LinkedList?

answer :

Linked List is a linear data structure and it is very common data structure which consists of group of nodes in a sequence which is divided in two parts. Each node consists of its own data and the address of the next node and forms a chain. Linked Lists are used to create trees and graphs.

-------------------------------------------------------------
what is queue?

Queue is an abstract data structure, somewhat similar to Stack. In contrast to Queue, queue is opened at both end. One end is always used to insert data (enqueue) and the other is used to remove data (dequeue). Queue follows First-In-First-Out methodology, i.e., the data item stored first will be accessed first.

-------------------------------------------------
what is stack?

Answer :

Stack is an ordered list of similar data type. Stack is a LIFO structure. (Last in First out). push() function is used to insert new elements into the Stack and pop() is used to delete an element from the stack. Both insertion and deletion are allowed at only one end of Stack called Top.


-------------------------------------------------

what is FIFO and LIFO?

Answer :

FIFO : first in first out
LIFO : Last in First Out

-------------------------------------
what is the order of complexity?

Answer :

The most common metric for calculating time complexity is Big O notation. This removes all constant factors so that the running time can be estimated in relation to N as N approaches infinity

-------------------------------------
what is the best case to search an element from an array?

Answer : Data Lookup but not with large amount of index


--------------------------

what is the worst case to search an element from an array?
Answer :
Seach Array with large number of index.

-----------------------------------
what is tree in data structure?

Answer :
A type of data structure in which each element is attached to one or more elements directly beneath it. The connections between elements are called branches. Trees are often called inverted trees because they are normally drawn with the root at the top.
The elements at the very bottom of an inverted tree (that is, those that have no elements below them) are called leaves. Inverted trees are the data structures used to represent hierarchical file structures. In this case, the leaves are files and the other elements above the leaves are directories.
A binary tree is a special type of inverted tree in which each element has only two branches below it.

---------------------------------------
what is graph in data structure?

Answer :

A graph data structure consists of a finite (and possibly mutable) set of vertices or nodes or points, together with a set of unordered pairs of these vertices for an undirected graph or a set of ordered pairs for a directed graph.

-------------------------------------------------
what is the difference between the HashTable and HashMap?
Answer :


Hashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.
Hashtable does not allow null keys or values. HashMap allows one null key and any number of null values.
One of HashMap's subclasses is LinkedHashMap, so in the event that you'd want predictable iteration order (which is insertion order by default), you could easily swap out the HashMap for a LinkedHashMap. This wouldn't be as easy if you were using Hashtable.
Since synchronization is not an issue for you, I'd recommend HashMap. If synchronization becomes an issue, you may also look at ConcurrentHashMap.

-------------------------------------------------


What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.
Answer :

RDMS : Array List, Linked List
Network data model : data structures
Hierarchical : Tree etc

--------------------------------

How HashMap works in java?
Answer :
When put() method is used to store (Key, Value) pair, HashMap implementation calls hashcode on Key object to calculate a hash that is used to find a bucket where Entry object will be stored.
---------------------------------------
What is ArrayIndexOutOfBoundsException in java? When it occurs?

Answer:

the array, an ArrayIndexOutOfBoundsException is thrown. The ArrayIndexOutOfBoundsException is a RuntimeException thrown only at runtime. The Java Compiler does not check for this error during the compilation of a program.
when : This exception is thrown when you try to access an array item that doesn't exis
----------------------------------------------

What are the different ways of copying an array into another array?

Answer :

Using Multiple  Loop
using Clone / Again to another Array Variable

-------------------------------------------
What is difference between an array and a linked list?

Answer:

LinkedList is fast for adding and deleting elements, but slow to access a specific element. ArrayList is fast for accessing a specific element but can be slow to add to either end, and especially slow to delete in the middle. ArrayList is essentially an array. LinkedList is implemented as a double linked list.


--------------------------------------------------------------
What is DFS and BFS?

Answer :
Distributed file System (DFS) is a set of client and server services that allow an organization using Microsoft Windows servers to organize many distributed SMB file shares into a distributed file system.

Breadth-first search (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a 'search key') and explores the neighbor nodes first, before moving to the next level neighbors.
--------------------------------------------------------------
What is Recursion?

Answer:

In computer programming, a recursion (noun, pronounced ree-KUHR-zhion) is programming that is recursive (adjective), and recursive has two related meanings:

1) A recursive procedure or routine is one that has the ability to call itself. This usually means that it has the capability to save the condition it was in or the particular process it is serving when it calls itself (otherwise, any variable values that have been developed in executing the code are overlaid by the next iteration or go-through). Typically, this is done by saving values in registers or data area stacks before calling itself or at the beginning of the sequence where it has just been reentered.

2) A recursive expression is a function, algorithm, or sequence of instructions (typically, an IF, THEN, ELSE sequence) that loops back to the beginning of itself until it detects that some condition has been satisfied. Here is a simple example (using a made-up computer source language):
----------------------------------------------------------
What is Big-(O)-notation?


Answer :

Big O notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity. It is a member of a family of notations invented by Paul Bachmann,[1] Edmund Landau,[2] and others, collectively called Bachmann-Landau notation or asymptotic notation.

In computer science, big O notation is used to classify algorithms by how they respond to changes in input size, such as how the processing time of an algorithm changes as the problem size becomes extremely large.[3] In analytic number theory it is used to estimate the "error committed" while replacing the asymptotic size of an arithmetical function by the value it takes at a large finite argument. A famous example is the problem of estimating the remainder term in the prime number theorem.

--------------------------------------------------------------------------------

Outlined different kind of sorting algorithm with time complexity?

Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.

Answer:


  Bubble Sort:
  Advantages-
  The primary advantage of the bubble sort is that it is popular and easy to implement.
  The main disadvantage of the bubble sort is the fact that it does not deal well with a list containing a huge number of items.
  In the bubble sort, elements are swapped in place without using additional temporary storage.
   Disadvantages-
  The bubble sort requires n-squared processing steps for every n number of elements to be sorted.
  The space requirement is at a minimum
  The bubble sort is mostly suitable for academic teaching but not for real-life applications.


  Insertion Sort:
  Advantages-
  The main advantage of the insertion sort is its simplicity.
  The disadvantage of the insertion sort is that it does not perform as well as other, better sorting algorithms
  It also exhibits a good performance when dealing with a small list.
   Disadvantages-
  With n-squared steps required for every n element to be sorted, the insertion sort does not deal well with a huge list.
  The insertion sort is an in-place sorting algorithm so the space requirement is minimal.
  The insertion sort is particularly useful only when sorting a list of few items.

  Selection Sort:
  Advantages-
  The main advantage of the selection sort is that it performs well on a small list.
  The primary disadvantage of the selection sort is its poor efficiency when dealing with a huge list of items.
  Because it is an in-place sorting algorithm, no additional temporary storage is required beyond what is needed to hold the original list.
  Disadvantages-
  The selection sort requires n-squared number of steps for sorting n elements.
  Its performance is easily influenced by the initial ordering of the items before the sorting process.
  Quick Sort is much more efficient than selection sort

  Quick Sort:
  Advantages-
  The quick sort is regarded as the best sorting algorithm.
  The slight disadvantage of quick sort is that its worst-case performance is similar to average performances of the bubble, insertion or selections sorts.
  It is able to deal well with a huge list of items.
  Disadvantages-
  If the list is already sorted than bubble sort is much more efficient than quick sort
  Because it sorts in place, no additional storage is required as well
  If the sorting element is integers than radix sort is more efficient than quick sort.


  Heap sort:
  Advantages-
  The Heap sort algorithm is widely used because of its efficiency.
  Heap sort requires more space for sorting
  The Heap sort algorithm can be implemented as an in-place sorting algorithm
  Disadvantages-
  Quick sort is much more efficient than Heap in many cases
  its memory usage is minimal
  Heap sort make a tree of sorting elements.

  Merge Sort:

  Advantages-
  It can be applied to files of any size.
  Requires extra space »N
  Reading of the input during the run-creation step is sequential ==> Not much seeking.
  Disadvantages-
  Merge Sort requires more space than other sort.
  If heap sort is used for the in-memory part of the merge, its operation can be overlapped with I/O
  Merge sort is less efficient than other sort


Sort 	Average 	Best 	Worst 	Space 	Stability 	Remarks
Bubble sort 	O(n^2) 	O(n^2) 	O(n^2) 	Constant 	Stable 	Always use a modified bubble sort
Modified Bubble sort 	O(n^2) 	O(n) 	O(n^2) 	Constant 	Stable 	Stops after reaching a sorted array
Selection Sort 	O(n^2) 	O(n^2) 	O(n^2) 	Constant 	Stable 	Even a perfectly sorted input requires scanning the entire array
Insertion Sort 	O(n^2) 	O(n) 	O(n^2) 	Constant 	Stable 	In the best case (already sorted), every insert requires constant time
Heap Sort 	O(n*log(n)) 	O(n*log(n)) 	O(n*log(n)) 	Constant 	Instable 	By using input array as storage for the heap, it is possible to achieve constant space
Merge Sort 	O(n*log(n)) 	O(n*log(n)) 	O(n*log(n)) 	Depends 	Stable 	On arrays, merge sort requires O(n) space; on linked lists, merge sort requires constant space
Quicksort 	O(n*log(n)) 	O(n*log(n)) 	O(n^2) 	Constant 	Stable 	Randomly picking a pivot value (or shuffling the array prior to sorting) can help avoid worst case scenarios such as a perfectly sorted array.


----------------------------------------------------------------------------------------------
